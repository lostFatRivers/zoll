<!-- **************************************************************************
#
# Copyright (C) 2004-2011 Oracle Corporation
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#         
#
#************************************************************************** --> 

<hudson.util.XStreamTest_-Foo>
  <m serialization="custom">
    <unserializable-parents/>
    <java.util.concurrent.ConcurrentHashMap>
      <default>
        <segmentMask>15</segmentMask>
        <segmentShift>28</segmentShift>
        <segments>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
          <java.util.concurrent.ConcurrentHashMap_-Segment>
            <sync class="java.util.concurrent.locks.ReentrantLock$NonfairSync" serialization="custom">
              <java.util.concurrent.locks.AbstractQueuedSynchronizer>
                <default>
                  <state>0</state>
                </default>
              </java.util.concurrent.locks.AbstractQueuedSynchronizer>
              <java.util.concurrent.locks.ReentrantLock_-Sync>
                <default/>
              </java.util.concurrent.locks.ReentrantLock_-Sync>
            </sync>
            <loadFactor>0.75</loadFactor>
          </java.util.concurrent.ConcurrentHashMap_-Segment>
        </segments>
      </default>
      <string>abc</string>
      <string>def</string>
      <null/>
      <null/>
    </java.util.concurrent.ConcurrentHashMap>
  </m>
</hudson.util.XStreamTest_-Foo>
